---
name: Docker build and deploy

on:
  push:
    branches: [ develop, master ]
  pull_request:
    branches: [ develop, master ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    name: Build and deploy image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: GithubActionsSession
        aws-region: us-east-2
      if: github.event_name != 'pull_request'

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      if: github.event_name != 'pull_request'

    - name: Prepare values
      id: prepare
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: human-app-ui
      run: |
        IMAGE_TAG=$GITHUB_REF_NAME-${GITHUB_SHA::7}-$(date +%s)
        TAGGED_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:${IMAGE_TAG}
        echo "tagged_image=${TAGGED_IMAGE}" >> $GITHUB_ENV

    - name: Prepare .env values for Staging
      id: prepare-env-staging
      if: github.ref == 'refs/heads/develop'
      run: |
        aws ssm get-parameter --region us-east-2 --name 'STAGING_HP_UI_ENV_FILE' --with-decryption --query 'Parameter.Value' --output text > .env

    - name: Prepare .env values for Prod
      id: prepare-env-prod
      if: github.ref == 'refs/heads/master'
      run: |
        aws ssm get-parameter --region us-east-2 --name 'PROD_HP_UI_ENV_FILE' --with-decryption --query 'Parameter.Value' --output text > .env

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1

    - name: Prepare .env values for build image on pull_request
      id: prepare-env-on-pull-request
      if: github.event_name == 'pull_request'
      run: |
        cp .env.example .env

    - name: Build the image
      id: build-image
      if: github.event_name == 'pull_request'
      uses: docker/build-push-action@v2
      with:
        context: .
        push: false
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push the image to Amazon ECR
      id: build-push-image
      if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master'
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ env.tagged_image }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Manual approval for deploy to Prod
      id: manual-approval-prod
      if: github.ref == 'refs/heads/master'
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ secrets.GH_TOKEN }}
        approvers: vkomodey,AmrEssamSh,ivhus
        minimum-approvals: 1

    - name: Get Github action IP
      id: ip
      if: github.event_name != 'pull_request'
      uses: haythem/public-ip@v1.2

    - name: Configure SSH
      id: configure-ssh
      if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master'
      run: |
        mkdir -p ~/.ssh/
        aws ssm get-parameter --region us-east-2 --name 'SSH_KEY_FOR_CD' --with-decryption --query 'Parameter.Value' --output text > ~/.ssh/deploy.key
        chmod 600 ~/.ssh/deploy.key
        cat >>~/.ssh/config <<END
        Host staging
          HostName ${{ secrets.STAGING_VM_IP }}
          User ubuntu
          IdentityFile ~/.ssh/deploy.key
          StrictHostKeyChecking no
        Host prod
          HostName ${{ secrets.PROD_VM_IP }}
          User ubuntu
          IdentityFile ~/.ssh/deploy.key
          StrictHostKeyChecking no
        END

    - name: Add Github Actions IP to Staging Security group
      id: add-ip-to-staging-sg
      if: github.ref == 'refs/heads/develop'
      run: |
        aws ec2 authorize-security-group-ingress --group-id sg-07faaf04fdd809052 --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
    
    - name: Add Github Actions IP to Prod Security group
      id: add-ip-to-prod-sg
      if: github.ref == 'refs/heads/master'
      run: |
        aws ec2 authorize-security-group-ingress --group-id sg-0d64e67dc586078f0 --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

    - name: Copy launcher to Staging server
      id: launcher-to-staging
      if: github.ref == 'refs/heads/develop'
      run: |
        scp .github/workflows/common/staging_deploy.bash staging:~/human-app-ui/deploy.bash

    - name: Run on Staging server
      id: run-on-staging
      if: github.ref == 'refs/heads/develop'
      run: |
        ssh staging '/usr/bin/env bash ~/human-app-ui/deploy.bash ${{ env.tagged_image }}'

    - name: Copy launcher to Prod server
      id: launcher-to-prod
      if: github.ref == 'refs/heads/master'
      run: |
        scp .github/workflows/common/prod_deploy.bash prod:~/human-app-ui/deploy.bash

    - name: Run on Prod server
      id: run-on-prod
      if: github.ref == 'refs/heads/master'
      run: |
        ssh prod '/usr/bin/env bash ~/human-app-ui/deploy.bash ${{ env.tagged_image }}'

    - name: Remove Github Actions IP from Staging security group
      id: remove-ip-to-staging-sg
      if: github.ref == 'refs/heads/develop' && always()
      run: |
        aws ec2 revoke-security-group-ingress --group-id sg-07faaf04fdd809052 --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

    - name: Remove Github Actions IP from Prod security group
      id: remove-ip-from-prod-sg
      if: github.ref == 'refs/heads/master' && always()
      run: |
        aws ec2 revoke-security-group-ingress --group-id sg-0d64e67dc586078f0 --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
